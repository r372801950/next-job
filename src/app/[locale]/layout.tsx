import {NextIntlClientProvider, hasLocale} from 'next-intl';
import {notFound} from 'next/navigation';
import {routing} from '@/i18n/routing';
import { isRtlLang } from 'rtl-detect';
import { SiteHeader } from "@/components/site-header"
import { ClerkProvider } from '@clerk/nextjs';

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "@/app/globals.css";
import { AnimatedBackground } from '@/components/animated-background';
import { SiteFooter } from '@/components/site-footer';
import { enUS, zhCN } from "@clerk/localizations";
import { getTranslations } from 'next-intl/server';
import { currentUser } from '@clerk/nextjs/server';
import { createClerkClient } from '@clerk/clerk-sdk-node';
import { ROLES, type UserRole } from '@/lib/permissions';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const clerkClient = createClerkClient({ secretKey: process.env.CLERK_SECRET_KEY });

export default async function LocaleLayout({
  children,
  params
}: {
  children: React.ReactNode;
  params: Promise<{locale: string}>;
}) {
  // Ensure that the incoming `locale` is valid
  const {locale} = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  // 获取当前用户
  const user = await currentUser();

  // 默认角色
  let role: UserRole = ROLES.JOBSEEKER;

  // 如果用户存在，获取 unsafeMetadata
  if (user) {
    try {
      const clerkUser = await clerkClient.users.getUser(user.id);
      const userRole = clerkUser.unsafeMetadata?.role;
      // 只接受合法的 role
      if (userRole === ROLES.RECRUITER || userRole === ROLES.JOBSEEKER) {
        role = userRole;
      } else {
        role = ROLES.JOBSEEKER;
      }
    } catch (error) {
      console.error('获取 unsafeMetadata 失败:', error);
    }
  }

  // 使用 rtl-detect 判断语言方向
  const direction = isRtlLang(locale) ? 'rtl' : 'ltr';
  
  // 在服务端预先获取所有翻译文本
  const t = await getTranslations('Header');
  const headerTranslations = {
    navigation: {
      job: t('navigation.job'),
      talent: t('navigation.talent'),
      investment: t('navigation.investment'),
      information: t('navigation.information'),
    },
    auth: {
      signIn: t('auth.signIn'),
      signUp: t('auth.signUp'),
    },
    language: t('language'),
  };

  return (
    <ClerkProvider localization={locale === 'zh' ? zhCN : enUS} afterSignOutUrl={'/'}>
      <html lang={locale} dir={direction}>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased bg-black text-white relative`}>
          <NextIntlClientProvider locale={locale}>
            <AnimatedBackground />
            <SiteHeader translations={headerTranslations} locale={locale} role={role} />
            {children}
            <SiteFooter locale={locale} />
          </NextIntlClientProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}